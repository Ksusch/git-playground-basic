
Managing the File System

Learning Goals

After this lesson you will be able to:

Understand the organization of the filesystem of your computer’s operating system.
Understand what the Root and Home directories are.
Navigate around your filesystem using terminal commands.
Create, remove, and move files from your terminal.
Create and remove folders from your terminal.
Introduction

In this lesson you will learn what the File System is and how to manage files and folders through the terminal. During the lesson, you will need the terminal, so go ahead and open a new window now.

MacOS: Search with Command + Spacebar (⌘ + Spacebar) and type iTerm2.
Linux: Open the Terminator App.
Navigating throughout the terminal and performing the operations we are about to discuss is an absolutely vital skill for developers. The more efficient you are in the terminal, the more efficient of a developer you will be.

These skills will build with time and practice.

File System

FileSystem Organization

The files on a Linux or OSX system are arranged in what is called a hierarchical directory structure. It means that they are organized in a tree-like pattern of directories, or folders, which may contain files and other directories.



Root and Home Directories

The top-level directory in the file system is called the root directory (/).

Any directory can contain files and/or subdirectories, which contain more files and subdirectories and so on.

Every user has it’s own home directory, where he keeps all the information for his account, including his own desktop, movies, pictures, and applications!

When you open your terminal you most likely have the terminal waiting for commands in your home directory (/home/<your_username>).

First commands

Warning!
You don’t need to type the dollar ($) sign, just the command!! Your terminal will show the dollar sign to let you know where the input is.
In addition, the # => denotes a return value. This is what the computer should print out after you enter a command.
You do not need to type either of these.
Let’s try some useful commands:

Display your computer’s name:
$ hostname
 # => myComputer
Display the name of the current user:
$ whoami
  # => myUser
Display the current directory (pwd = print working directory):
$ pwd
# =>  /home/myUser
List Files

Display a list of files inside the active folder using the ls command. You can also use parameters after ls to display more detailed information.

You can and should use ls a lot to see where you are, and what files/folders exist in the current directory before executing commands.

:exclamation: Navigate to your home(cd ~) directory and run the following commands.
Add -l to get a detailed listing:
$ ls -l
Add -t to sort the results by file time:
$ ls -t
Add -S to sort by file size:
$ ls -S
Add -r to reverse the sorting:
$ ls -r
Add -a to include hidden files:
$ ls -a
You could combine them all together to improve your listing. If you type ls -la the result will be the detailed list of files including the hidden ones.

Notice that the first directories that appear are . and .., representing the current folder and the parent folder, respectively.

Change Directories

Sometimes you need to navigate between directories, using the cd command to do it. You can use the following command to switch to the previous directory:

$ cd ..
You can navigate to either full or relative paths. If you’re in /path/to/ and you want to navigate to the folder stuff inside that folder, you can simply type:

$ cd stuff
You can also navigate to absolute paths. Absolute paths start with the / symbol (root directory). Doing this specifies that the path starts from the root directory.

Navigate to your desktop by typing:

$ cd /Users/<your_username>/Desktop
Hint: Type whoami to see what our username is.

iTerm Tip
One of the coolest features that iTerm offers to you is the chance of changing directory without typing cd. If you are in the home directory, ~, you can change to the Desktop by typing just Desktop.
Remember that the Desktop folder is in the ~/Desktop path.
Cool Tricks

Navigate directly to the root path:

$ cd /
Navigate directly to our user’s home path:

$ cd ~
Navigate directly to the previous working directory:

$ cd -
Tab Completion

Typing the full name of the existing files and folders can be tedious. You will use the Tab key to skip all of the typing, and navigate much more quickly:

Go to home
$ cd
Type
$ cd de
Press the Tab key
This will automatically autocomplete the folder name to:

$ cd Desktop
Cool, right? It happens because Desktop is the only name that matches with the given string (de).

Rules

It will try to match any folder inmmediately inside, but will not try to match any subfolder. In the next case, if we are in the Home directory and we try cd Des, it will match Desktop, but not Desktop_folder:

  /Home (~)
    /Desktop
    /Documents
      /Desktop_folder
  ....
It’s not case sensitive. If you are in your Home directory and try cd des, it will match Desktop even if the actual name of the folder is capitalized.

Create and Remove Folders

Create a new folder using the mkdir <foldername> command:
$ mkdir new-folder
Remove an empty folder using the rmdir <foldername> command:
$ rmdir new-folder
You can remove any folder as long as the folder is empty. If it has files in, you’ll have to delete these files before you can remove the folder.

Create and Remove Files

Create a new, blank file, using touch <filename>:

$ touch new-file
Remove a file using rm <filename>:

$ rm new-file
Create a new folder, enter the new folder using cd, and then create several files using touch:

$ mkdir my-files
$ cd my-files
$ touch file-1
$ touch file-2
$ touch file-3
To delete a list of files and folders, including all files from subdirectories, without prompting you for every single entry, you can use the -r option for recursive, and the -f option to force it. If you are one directory above my-files, type:

:exclamation: Be careful when deleting file with rm -rf. You can delete all the files in your Operating System if you go to the root of your computer and run the command.
$ cd ..
$ rm -rf my-files
Display a file

You can display the file content on the screen with the cat command:

$ cat <filename>
If the specified file is very large, you won’t be able to see all the content in the screen. To be able to see all the content page by page, you have to use the more or less commands:

$ more <filename>
This will display the content of a file on the screen, and prompt you to scroll through the file a screen at a time.

Copy a File

Use the cp command to copy a file. First let’s create a new file:

$ touch hello.txt
Open the file and add some text. You can use a text editor to add the text. Create a new throwaway folder, click on it and add “Hello. I’m learning to copy a file”:

$ cp hello.txt copied.txt
List files to verify you have now two files. Open copied.txt to verify the text is there:

$ ls
You can also copy the file into another directory:

$ mkdir copied-file
$ cp hello.txt copied-file/
Notice the / (slash) at the end of a directory. That makes sure the path is a directory, so if the directory doesn’t exist you’ll get an error. Verify the copied file is there:

$ ls copied-file
Finally, we can copy directories that are not empty by running the following command:

$ cp -r
Move A File

You can move a file into a different directory using the mv command. Create and enter a new directory called temp:

$ mkdir temp
$ cd temp
$ touch awesome.txt
$ ls temp
You should have just one file called awesome.txt. You can rename it by moving it into the same folder:

$ mv awesome.txt uncool.txt
$ ls
Now you should have one file called uncool.txt. Move the file into another directory. Instead of specifying a new name for the file, specify a new path:

$ mv uncool.txt /Users/my_name/Desktop
$ ls /Users/my_name/Desktop
Summary

In this lesson you have learnt all about the file system. You have read about how your files are organized into a tree structure, and some basic functionality like listing, creating, and removing files and folders.

You have also taken a look at how to copy and move files and folders, while adding parameters to your commands to get the desired output.

File System manipulation is super important to be an efficient developer. Moving files in folders in finder on your Mac is ok, but you can become very quick in how you operate if you master the terminal. Try your best to not use the finder GUI, because practice makes perfect.

Extra Resources

Tower Command Line Cheat Sheet
Terminal Cheat Sheet for Mac (including shortcuts)